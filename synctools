#!/bin/bash

# Enhanced setup script to copy tools to user bin directory with colorful output
# This script should be run from the collect project home directory

# Color definitions for enhanced output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly BOLD='\033[1m'
readonly NC='\033[0m' # No Color

# Set default target directory (configurable)
TARGET_DIR=${1:-~/bin}

# Expand tilde to home directory
TARGET_DIR="${TARGET_DIR/#\~/$HOME}"

# Get the directory where this script is located (project home)
PROJECT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
TOOLS_DIR="$PROJECT_DIR/tools"

# Enhanced printing functions
print_header() {
    echo -e "${BOLD}${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${BOLD}${WHITE}  🔧 SYNCTOOLS - Tool Installation Script${NC}"
    echo -e "${BOLD}${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}

print_info() {
    echo -e "${CYAN}ℹ${NC}  $1"
}

print_success() {
    echo -e "${GREEN}✅${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️${NC}  $1"
}

print_error() {
    echo -e "${RED}❌${NC} $1"
}

print_step() {
    echo -e "\n${BOLD}${PURPLE}▶${NC} ${BOLD}$1${NC}"
}

print_item() {
    echo -e "   ${GREEN}•${NC} $1"
}

# Function to display usage
usage() {
    print_header
    echo -e "${BOLD}USAGE:${NC}"
    echo -e "  $0 [target_directory]"
    echo ""
    echo -e "${BOLD}DESCRIPTION:${NC}"
    echo -e "  ${BOLD}SYNCTOOLS${NC} is a comprehensive installation and backup script for the collect project."
    echo -e "  It performs two main functions:"
    echo ""
    echo -e "  ${BOLD}1. Tool Installation:${NC}"
    echo -e "     • Copies all executable tools from the tools/ directory to your bin directory"
    echo -e "     • Makes all copied tools executable with proper permissions"
    echo -e "     • Validates PATH configuration and provides setup guidance"
    echo -e "     • Provides colorful visual feedback throughout the process"
    echo ""
    echo -e "  ${BOLD}2. Dotfiles Backup:${NC}"
    echo -e "     • Backs up your .zshrc configuration to the project's dotfiles/ directory"
    echo -e "     • Copies your Ghostty terminal configuration (~/.config/ghostty)"
    echo -e "     • Backs up your Neovim init.lua configuration (~/.config/nvim/init.lua)"
    echo -e "     • Creates organized dotfiles structure for version control"
    echo ""
    echo -e "${BOLD}ARGUMENTS:${NC}"
    echo -e "  ${CYAN}target_directory${NC}    Optional. Directory to install tools (default: ~/bin)"
    echo ""
    echo -e "${BOLD}OPTIONS:${NC}"
    echo -e "  ${YELLOW}--llm${NC}              Display comprehensive usage information (LLM-friendly)"
    echo -e "  ${YELLOW}--help, -h${NC}         Display this usage information"
    echo ""
    echo -e "${BOLD}FEATURES:${NC}"
    echo -e "  • Enhanced colorful terminal output with status indicators"
    echo -e "  • Automatic directory creation with proper error handling"
    echo -e "  • Tool validation and permission management"
    echo -e "  • PATH verification with configuration suggestions"
    echo -e "  • Comprehensive dotfiles backup across multiple applications"
    echo -e "  • Installation summary with detailed feedback"
    echo ""
    echo -e "${BOLD}EXAMPLES:${NC}"
    echo -e "  ${GREEN}$0${NC}                 # Install tools to ~/bin and backup dotfiles"
    echo -e "  ${GREEN}$0 ~/.local/bin${NC}    # Install tools to ~/.local/bin and backup dotfiles"
    echo -e "  ${GREEN}$0 --llm${NC}           # Show comprehensive help for AI assistants"
    echo -e "  ${GREEN}$0 --help${NC}          # Show this help message"
    echo ""
    echo -e "${BOLD}DIRECTORY STRUCTURE:${NC}"
    echo -e "  ${CYAN}tools/${NC}              # Source directory containing executable tools"
    echo -e "  ${CYAN}dotfiles/zshrc${NC}      # Backed up shell configuration"
    echo -e "  ${CYAN}dotfiles/ghostty/${NC}   # Backed up terminal configuration"
    echo -e "  ${CYAN}dotfiles/nvim/${NC}      # Backed up Neovim configuration"
    echo ""
    echo -e "${BOLD}${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    exit 0
}

# Check for help flags
if [ $# -eq 1 ] && ([ "$1" = "--llm" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]); then
    usage
fi

# Display header
print_header

# Display configuration
print_step "Configuration"
print_info "Project directory: ${BOLD}$PROJECT_DIR${NC}"
print_info "Tools directory: ${BOLD}$TOOLS_DIR${NC}"
print_info "Target directory: ${BOLD}$TARGET_DIR${NC}"

# Check if tools directory exists
print_step "Validation"
if [ ! -d "$TOOLS_DIR" ]; then
    print_error "Tools directory not found at $TOOLS_DIR"
    exit 1
fi
print_success "Tools directory found"

# Create target directory if it doesn't exist
if [ ! -d "$TARGET_DIR" ]; then
    print_info "Creating target directory..."
    mkdir -p "$TARGET_DIR"
    if [ $? -eq 0 ]; then
        print_success "Target directory created"
    else
        print_error "Failed to create target directory"
        exit 1
    fi
else
    print_success "Target directory exists"
fi

# Copy all files from tools directory
print_step "Copying Tools"
tool_count=0
copied_tools=()

for tool in "$TOOLS_DIR"/*; do
    # Skip __pycache__ directories
    if [ -d "$tool" ]; then
        dir_name=$(basename "$tool")
        if [ "$dir_name" = "__pycache__" ]; then
            continue
        fi
        # Skip all directories, we only want files
        continue
    fi
    
    if [ -f "$tool" ]; then
        tool_name=$(basename "$tool")
        # Skip CLAUDE.md and __init__.py files
        if [ "$tool_name" = "CLAUDE.md" ] || [ "$tool_name" = "__init__.py" ]; then
            continue
        fi
        if cp "$tool" "$TARGET_DIR/" 2>/dev/null; then
            print_item "Copied ${BOLD}$tool_name${NC}"
            copied_tools+=("$tool_name")
            ((tool_count++))
        else
            print_error "Failed to copy $tool_name"
        fi
    fi
done

if [ $tool_count -eq 0 ]; then
    print_warning "No tools found in $TOOLS_DIR"
    exit 0
fi

# Make all copied tools executable
print_step "Setting Permissions"
executable_count=0
for tool_name in "${copied_tools[@]}"; do
    tool_path="$TARGET_DIR/$tool_name"
    if chmod u+x "$tool_path" 2>/dev/null; then
        print_item "Made ${BOLD}$tool_name${NC} executable"
        ((executable_count++))
    else
        print_error "Failed to make $tool_name executable"
    fi
done

# Display completion summary
print_step "Summary"
print_success "Installation complete!"
print_info "${BOLD}$tool_count${NC} tools copied and ${BOLD}$executable_count${NC} made executable"
print_info "Tools are now available in: ${BOLD}$TARGET_DIR${NC}"

# List installed tools
if [ ${#copied_tools[@]} -gt 0 ]; then
    echo ""
    print_info "${BOLD}Installed tools:${NC}"
    for tool_name in "${copied_tools[@]}"; do
        echo -e "   ${GREEN}▸${NC} ${BOLD}$tool_name${NC}"
    done
fi

# Check if target directory is in PATH
echo ""
if [[ ":$PATH:" != *":$TARGET_DIR:"* ]]; then
    print_warning "Target directory is not in your PATH"
    echo -e "${YELLOW}💡${NC} To use these tools from anywhere, add this line to your ${BOLD}~/.bashrc${NC} or ${BOLD}~/.zshrc${NC}:"
    echo -e "   ${CYAN}export PATH=\"$TARGET_DIR:\$PATH\"${NC}"
else
    print_success "Target directory is already in your PATH"
fi

# Copy dotfiles section
print_step "Copying Dotfiles"
DOTFILES_DIR="$PROJECT_DIR/dotfiles"

# Ensure dotfiles directory exists
if [ ! -d "$DOTFILES_DIR" ]; then
    print_info "Creating dotfiles directory..."
    mkdir -p "$DOTFILES_DIR"
    if [ $? -eq 0 ]; then
        print_success "Dotfiles directory created"
    else
        print_error "Failed to create dotfiles directory"
    fi
else
    print_success "Dotfiles directory exists"
fi

# Copy .zshrc
if [ -f "$HOME/.zshrc" ]; then
    if cp "$HOME/.zshrc" "$DOTFILES_DIR/.zshrc" 2>/dev/null; then
        print_item "Copied ${BOLD}.zshrc${NC} from home directory"
    else
        print_error "Failed to copy .zshrc"
    fi
else
    print_warning ".zshrc not found in home directory"
fi

# Copy ghostty config
GHOSTTY_CONFIG_DIR="$HOME/.config/ghostty"
if [ -d "$GHOSTTY_CONFIG_DIR" ]; then
    # Create ghostty subdirectory in dotfiles
    mkdir -p "$DOTFILES_DIR/ghostty"
    if cp -r "$GHOSTTY_CONFIG_DIR"/* "$DOTFILES_DIR/ghostty/" 2>/dev/null; then
        print_item "Copied ${BOLD}ghostty config${NC} from ~/.config/ghostty"
    else
        print_error "Failed to copy ghostty config"
    fi
else
    print_warning "Ghostty config directory not found at ~/.config/ghostty"
fi

# Copy nvim init.lua
NVIM_CONFIG="$HOME/.config/nvim/init.lua"
if [ -f "$NVIM_CONFIG" ]; then
    # Create nvim subdirectory in dotfiles
    mkdir -p "$DOTFILES_DIR/nvim"
    if cp "$NVIM_CONFIG" "$DOTFILES_DIR/nvim/init.lua" 2>/dev/null; then
        print_item "Copied ${BOLD}nvim init.lua${NC} from ~/.config/nvim"
    else
        print_error "Failed to copy nvim init.lua"
    fi
else
    print_warning "Nvim init.lua not found at ~/.config/nvim/init.lua"
fi

echo -e "\n${BOLD}${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${BOLD}${GREEN}🎉 Setup completed successfully!${NC}"
echo -e "${BOLD}${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
