#!/bin/bash

# Define project home directories
GOHOME="/Users/benjaminmetz/go/src/github.com/metzben"
PYTHONHOME="/Users/benjaminmetz/python"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_info() {
    echo -e "${YELLOW}→${NC} $1"
}

# Function to show LLM-formatted usage
show_llm_usage() {
    echo "# copy-commands.sh Usage Guide"
    echo ""
    echo "This script copies .claude/commands/ files from the current directory to a target project."
    echo ""
    echo "## Usage"
    echo "\`\`\`bash"
    echo "./copy-commands.sh <destination>"
    echo "\`\`\`"
    echo ""
    echo "## Destination Formats"
    echo "- \`go/projectname\` - Copies to \$GOHOME/projectname/.claude/commands/"
    echo "- \`python/projectname\` - Copies to \$PYTHONHOME/projectname/.claude/commands/"
    echo "- \`/absolute/path\` - Copies to /absolute/path/.claude/commands/"
    echo "- \`projectname\` - Auto-detects project in GOHOME or PYTHONHOME"
    echo ""
    echo "## Environment Variables"
    echo "- GOHOME=$GOHOME"
    echo "- PYTHONHOME=$PYTHONHOME"
    echo ""
    echo "## Examples"
    echo "\`\`\`bash"
    echo "# Copy to a Go project"
    echo "./copy-commands.sh go/myapi"
    echo ""
    echo "# Copy to a Python project"
    echo "./copy-commands.sh python/webapp"
    echo ""
    echo "# Copy using absolute path"
    echo "./copy-commands.sh /home/user/projects/myproject"
    echo ""
    echo "# Auto-detect project location"
    echo "./copy-commands.sh myproject"
    echo "\`\`\`"
    echo ""
    echo "## Notes"
    echo "- Creates destination .claude/commands/ directory if it doesn't exist"
    echo "- Overwrites existing files in destination"
    echo "- Copies all .md files from source .claude/commands/"
    exit 0
}

# Check for --llm flag
if [ "$1" == "--llm" ]; then
    show_llm_usage
fi

# Check if argument is provided
if [ $# -eq 0 ]; then
    echo "Usage: $0 <project-name|path>"
    echo "       $0 --llm  # Show LLM-formatted usage"
    echo ""
    echo "Examples:"
    echo "  $0 go/myproject      # Copy to Go project"
    echo "  $0 python/myproject  # Copy to Python project"
    echo "  $0 /absolute/path    # Copy to absolute path"
    echo "  $0 myproject         # Auto-detect project type"
    exit 1
fi

# Get the source directory (current directory's .claude/commands)
SOURCE_DIR="$(pwd)/.claude/commands"

# Check if source directory exists
if [ ! -d "$SOURCE_DIR" ]; then
    print_error "Source directory not found: $SOURCE_DIR"
    exit 1
fi

# Count source files
SOURCE_FILE_COUNT=$(find "$SOURCE_DIR" -name "*.md" -type f 2>/dev/null | wc -l | tr -d ' ')
if [ "$SOURCE_FILE_COUNT" -eq 0 ]; then
    print_error "No .md files found in $SOURCE_DIR"
    exit 1
fi

print_info "Found $SOURCE_FILE_COUNT command files to copy"

# Resolve destination path
DEST_PATH="$1"

# Function to resolve project path
resolve_path() {
    local input="$1"
    
    # If it's an absolute path, use it as-is
    if [[ "$input" == /* ]]; then
        echo "$input"
        return
    fi
    
    # If it contains go/, use GOHOME
    if [[ "$input" == go/* ]]; then
        local project_name="${input#go/}"
        echo "$GOHOME/$project_name"
        return
    fi
    
    # If it contains python/, use PYTHONHOME
    if [[ "$input" == python/* ]]; then
        local project_name="${input#python/}"
        echo "$PYTHONHOME/$project_name"
        return
    fi
    
    # Otherwise, try to auto-detect by checking if project exists in either home
    if [ -d "$GOHOME/$input" ]; then
        print_info "Auto-detected as Go project"
        echo "$GOHOME/$input"
        return
    elif [ -d "$PYTHONHOME/$input" ]; then
        print_info "Auto-detected as Python project"
        echo "$PYTHONHOME/$input"
        return
    else
        # Default to current directory parent if no match found
        print_info "Project not found in GOHOME or PYTHONHOME, using as relative path"
        echo "$(pwd)/$input"
        return
    fi
}

# Resolve the destination path
DEST_BASE=$(resolve_path "$DEST_PATH")
DEST_DIR="$DEST_BASE/.claude/commands"

print_info "Source: $SOURCE_DIR"
print_info "Destination: $DEST_DIR"

# Create destination directory if it doesn't exist
if [ ! -d "$DEST_DIR" ]; then
    print_info "Creating destination directory..."
    mkdir -p "$DEST_DIR"
    if [ $? -ne 0 ]; then
        print_error "Failed to create destination directory"
        exit 1
    fi
    print_success "Created $DEST_DIR"
fi

# Copy files
echo ""
print_info "Copying command files..."
echo ""

COPIED=0
SKIPPED=0
FAILED=0

for file in "$SOURCE_DIR"/*.md; do
    if [ -f "$file" ]; then
        filename=$(basename "$file")
        dest_file="$DEST_DIR/$filename"
        
        if [ -f "$dest_file" ]; then
            echo -n "  $filename (exists, overwriting)... "
        else
            echo -n "  $filename... "
        fi
        
        if cp "$file" "$dest_file" 2>/dev/null; then
            echo -e "${GREEN}✓${NC}"
            ((COPIED++))
        else
            echo -e "${RED}✗${NC}"
            ((FAILED++))
        fi
    fi
done

# Print summary
echo ""
echo "Summary:"
print_success "$COPIED files copied successfully"

if [ $FAILED -gt 0 ]; then
    print_error "$FAILED files failed to copy"
fi

if [ $COPIED -eq $SOURCE_FILE_COUNT ] && [ $FAILED -eq 0 ]; then
    echo ""
    print_success "All command files copied successfully to $DEST_BASE"
else
    exit 1
fi
